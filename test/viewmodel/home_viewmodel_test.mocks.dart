// Mocks generated by Mockito 5.4.4 from annotations
// in family_game_score/test/viewmodel/home_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:family_game_score/service/navigation_service.dart' as _i6;
import 'package:family_game_score/service/snackbar_service.dart' as _i7;
import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/material.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:riverpod/src/internals.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProviderContainer_0 extends _i1.SmartFake
    implements _i2.ProviderContainer {
  _FakeProviderContainer_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderSubscription_1<State1> extends _i1.SmartFake
    implements _i2.ProviderSubscription<State1> {
  _FakeProviderSubscription_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_2 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_3 extends _i1.SmartFake
    implements _i3.InheritedWidget {
  _FakeInheritedWidget_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_4 extends _i1.SmartFake
    implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [Ref].
///
/// See the documentation for Mockito's code generation for more information.
class MockRef<State extends Object?> extends _i1.Mock
    implements _i2.Ref<State> {
  MockRef() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProviderContainer get container => (super.noSuchMethod(
        Invocation.getter(#container),
        returnValue: _FakeProviderContainer_0(
          this,
          Invocation.getter(#container),
        ),
      ) as _i2.ProviderContainer);

  @override
  T refresh<T>(_i2.Refreshable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [provider],
        ),
        returnValue: _i5.dummyValue<T>(
          this,
          Invocation.method(
            #refresh,
            [provider],
          ),
        ),
      ) as T);

  @override
  void invalidate(_i2.ProviderOrFamily? provider) => super.noSuchMethod(
        Invocation.method(
          #invalidate,
          [provider],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      State?,
      State,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void invalidateSelf() => super.noSuchMethod(
        Invocation.method(
          #invalidateSelf,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onAddListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onAddListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemoveListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onRemoveListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onCancel(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onCancel,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T read<T>(_i2.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [provider],
        ),
        returnValue: _i5.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [provider],
          ),
        ),
      ) as T);

  @override
  bool exists(_i2.ProviderBase<Object?>? provider) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [provider],
        ),
        returnValue: false,
      ) as bool);

  @override
  T watch<T>(_i2.AlwaysAliveProviderListenable<T>? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [provider],
        ),
        returnValue: _i5.dummyValue<T>(
          this,
          Invocation.method(
            #watch,
            [provider],
          ),
        ),
      ) as T);

  @override
  _i2.ProviderSubscription<T> listen<T>(
    _i2.AlwaysAliveProviderListenable<T>? provider,
    void Function(
      T?,
      T,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
    bool? fireImmediately,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [
            provider,
            listener,
          ],
          {
            #onError: onError,
            #fireImmediately: fireImmediately,
          },
        ),
        returnValue: _FakeProviderSubscription_1<T>(
          this,
          Invocation.method(
            #listen,
            [
              provider,
              listener,
            ],
            {
              #onError: onError,
              #fireImmediately: fireImmediately,
            },
          ),
        ),
      ) as _i2.ProviderSubscription<T>);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i6.NavigationService {
  MockNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void push(
    _i3.BuildContext? context,
    _i3.Widget? view,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #push,
          [
            context,
            view,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacement(
    _i3.BuildContext? context,
    _i3.Widget? view,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #pushReplacement,
          [
            context,
            view,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pop(_i3.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacementWithAnimationFromBottom(
    _i3.BuildContext? context,
    _i3.Widget? view,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #pushReplacementWithAnimationFromBottom,
          [
            context,
            view,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushAndRemoveUntil(
    _i3.BuildContext? context,
    _i3.Widget? view,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #pushAndRemoveUntil,
          [
            context,
            view,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SnackbarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnackbarService extends _i1.Mock implements _i7.SnackbarService {
  MockSnackbarService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void showHomeViewSnackBar(_i3.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #showHomeViewSnackBar,
          [context],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i3.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_2(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i3.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i3.InheritedWidget dependOnInheritedElement(
    _i3.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_3(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i3.InheritedWidget);

  @override
  void visitAncestorElements(_i3.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i3.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i3.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.DiagnosticsNode describeElement(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i3.DiagnosticsNode);

  @override
  _i3.DiagnosticsNode describeWidget(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i3.DiagnosticsNode>[],
      ) as List<_i3.DiagnosticsNode>);

  @override
  _i3.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_4(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i3.DiagnosticsNode);
}
